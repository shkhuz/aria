// immutable with runtime known
// immutable with compile time known
// mutable with rumtime known
// mutable with compile time known

//imm x = {yield 1;};

//import "import_this.ar" as it;

//fn main2() void {}

//struct ff {
//    Vec: gg,
//}
//
//struct Main {
//    //buf: cool,
//    buf2: *u32,
//    buf3: [2](u8),
//}

//imm cool: ff = undefined;

//imm primes: gg = {
//    imm sum = {
//        yield [0, 1, 2, 3, 4];
//    };
//    imm sum = .();
//    imm sum = .(1, 2, 3);
//    imm newliteral = Player {
//        .pos = 1,
//        .vel = oldvel(),
//    };
//    yield .(sum);
//};

//imm voidd: void = undefined;

//struct gg { po: *u32 }
//
////imm primes = [1, 2, 3];
//
//fn add(a: i8, b: ***********imm void, c: *imm void) void {}
//
//fn call(s: *[0]u8) gg {}
//
//fn main() void {
//    add(--12899999999998, 1, 1);
//    add(-gg, 8, 9);
//    add(it.import_this, 1, 2);
//    imm x = -2;
//    imm i = 2;
//    imm j: u16 = i+x;
//    imm k = j + -(-(-1));
//    imm l: gg = call();
//    //l.po.*.* = -1;
//    imm signed: i8 = 1;
//    //l.po[--1] = signed;
//    imm ptr = &gg;
//    //it = 1;
//    1 + -it;
//    //ptr.* = ptr;
//    8 + ptr;
//    //l.po.name = 1;
//
//    mut u8v: u8 = 1;
//    imm u16v: u16 = 1;
//    mut u8p = &u8v;
//    imm u16p = &u16v;
//
//    imm arr = 1;
//    imm arrptr = &arr;
//    imm elem = arrptr[-1];
//    imm str: []u8 = "";
//    str[0] = 1;
//
//    call("hello");
//
//    yield 1;
//}
//
fn call(a: [2]u8) i8 {}
fn main() void {
    imm main = 1;
    imm a = 1;
    imm ptra = &a;
    imm arr: [1]u8 = [9, a, 3]void;
    void([3, 3,]);
    imm b: u8 = true or "ds";

    imm c: [-1 / 0]u8 = [2]u8;
    imm c: [(-1 * 4 / 4)]u8 = [2]u8;

    imm x = !!true and cool;
    //imm x = if (true) { imm xx = 1; yield a; } else {};
    //imm y = if (true) 1 else if (false) 2;
    imm xx: void = return;
    //if (true) 1 else 0;
    //1 + 2;
    imm yy = [return, 0, true];
    imm final: void = if (true) {
        return false;
    } else 1;
    imm df: u32 = final;

    {
        1 + 2;
    }
    {
        1 + 2;
    }

    imm ff: u8;
    while (true) {
        if (true) break 1 else break;
    } else true;
    return true;
}

//fn cool() void { imm a: u8 = 1; imm x = [0]u8; }

// imm ptr: *fn (i32) i32 = 0x3423432;
// ptr();

//struct Cool {
//    a: *i64,
//    b: *u8,
//}
