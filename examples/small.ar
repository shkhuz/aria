type std = @import(1);

// immutable with runtime known
// immutable with compile time known
// mutable with rumtime known
// mutable with compile time known

imm x = {yield 1;};

type Main = struct {
    buf: Vec<u32>,
};

imm primes = {
    imm sum = {
        yield cool;
    };
    imm sum = 1;
    yield sum;
};

//^ ~ `

fn main() void {
    fn cool(a: int, b: int) std.Vec<usize, u8, *std.Vec<u8>> {
        fn cool() df {cool;}
        mut name = cool(a,cool(),mutable({}, {fn cool() void {}}));
        mut place = Vec::<u32>.new();
        imm war = if (cool) {call();} else cool;
        {mut name = {cool;};}
        if (main) {} else if (main) {} else if (main) {}

        if (main) {
            if (cool.a.b) 1 else {type Cool = Cool;}
        }
        func(1, 2);
        return @import(1).a;
        yield 1;
    }
}

type Cool = struct {
    type name = u8;
    a: usize,
    b: struct {},

    type name = u8;
};

type Main = ff;
type Main = *imm Main;
