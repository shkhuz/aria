// immutable with runtime known
// immutable with compile time known
// mutable with rumtime known
// mutable with compile time known

imm x = {yield 1;};

struct Main {
    buf: ff.Vec<u32>,
    buf: ((), []u16, std.Vec<u8>),
    buf: [2](u8, u16, u32),
}

imm primes = {
    imm sum = {
        yield [1]u32{ 0 };
    };
    imm sum = ();
    imm sum = (1, 2, 3);
    imm newliteral = Player {
        .pos = 1,
        .vel = oldvel(),
    };
    yield sum;
};

fn main() void {
    fn cool(a: int, b: int) std.Vec<usize, u8, *std.Vec<u8>> {
        fn cool() df {cool;}
        mut name = cool(a,cool(),mutable({}, {fn cool() void {}}));
        mut place = Vec::<u32>.new();
        imm war = if (cool) {call();} else cool;
        {mut name = {cool;};}
        if (main) {} else if (main) {} else if (main) {}

        if (main) {
            if (cool.a.b) 1 else {}
        }
        func(1, My.Player::<u32>.newtype {.name = 1}, 2, New {.f = 1});
        return @import(1).a;
        yield 1;
    }
}

struct Cool {
    a: usize,
    b: *u8,
}
