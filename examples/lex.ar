// fn main(
//     iden: u8, 
//     df: isize,
//     ) {
//     let i: u8;
//     let b: void = {
//         let b = {
//             let a = {

//             };
//             let a;
//             { { let c; } }
//         };
//     };
// }
// fn main() {}

// fn main(argc: usize) usize {
//     let a: u8 = 1_2_3;
//     let b: u16 = 1_2_3;
//     let c: u32 = 1_2_3;
//     let d: u64 = 1_2_3;
//     let e: i8 = 1_2_3;
//     let f: i16 = 1_2_3;
//     let g: i32 = 1_2_3;
//     let h: i64 = 1_2_3;
//     let i: *const void;
//     let z = {
//         let c = 1;
//         i
//     };
//     // let v: void = main;
//     call(call(a))
// }

// fn call(a: usize) usize {
//     a
// }

fn main() {
    let a: u8 = 1;
    let b: u64 = 2;
    let c: u16 = 3;
    let d: u8 = 4;
    let e: u32 = 5;
    let f: i32 = 6;
    let g: i64 = 7;
    let h: i8 = 8;
    give_ints(
        a,
        b,
        c,
        d,
        e,
        f,
        g,
        h);
    tests();
}

fn give_ints(a: u8, b: u64, c: u16, d: u8, e: u32, f: i32, g: i64, h: i8) {
    { let x: u64; }
    { let x: u64; }
    { let x: u64; }
    { let x: u64; }
    { let x: u64; }
    { let x: u64; }
    { let x: u64; }
    { let x: u64; }
    { let x: u64; }
    { let x: u64; }
    { let x: u64; }
    { let x: u64; }
    print_u64(a);
    print_u64(b);
    print_u64(c);
    print_u64(d);
    print_u64(e);
    print_i64(f);
    print_i64(g);
    print_i64(h);
}

fn tests() {
    // test rax, rax
    // jz .L
    // if false {
    //     print_u64(add(add(add(add(1)))));
    // } else {
    //     print_u64(add(add(add(add(9)))));
    // }
    // print_u64(0);
    let i: u64 = if false {
        1
    } else {
        2
    };
    print_u64(i);
}

extern fn print_u64(n: u64);
extern fn print_i64(n: i64);
extern fn add(n: u64) u64;
