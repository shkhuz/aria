extern fn _syscall(
        syscall: u64,
        p1: u64,
        p2: u64,
        p3: u64,
        p4: u64,
        p5: u64,
        p6: u64) i32;

fn write(buf: *imm u8, bytes: u64) void {
    _syscall(1, 1, buf as u64, bytes, 0, 0, 0);
}

fn read(buf: *u8, bytes: u64) i32 {
    return _syscall(0, 0, buf as u64, bytes, 0, 0, 0);
}

fn writedigit(digit: u8) void {
    imm char = digit + 48;
    write(&char, 1);
}

fn writeinteger(int: u64) void {
    mut buf: [256]u8;
    mut buf2: [256]u8;

    mut c: u64 = 0;
    if (int == 0) {
        writedigit(0);
        return;
    }
    while (int != 0) {
        imm lsd = (int % 10) as u8;
        int = int / 10;
        buf[c] = lsd + 48;
        c = c + 1;
    }

    mut size = c;
    while (c != 0) {
        c = c - 1;
        buf2[size-c-1] = buf[c];
    }

    write(&buf2[0], size);
}

fn fibbonacci(n: u64) u64 {
   return if (n == 0) 0
   else   if (n == 1) 1
   else (fibbonacci(n-1) + fibbonacci(n-2));
}

export fn main() void {
    writeinteger(fibbonacci(35));
}
