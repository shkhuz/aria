namespace std {
	namespace cool {
		let variable = cool();

		struct string {
			len: std::ty::x64::usize,
		}

		fn nested_fn() {
			fn _1() {
				fn _2() {
					var();
					get_function(a, b)(a, b, c);
				}
			}
		}
	}
}

struct foo {}

struct baz {
	foo: struct { c: char },
	baz: int, 
	bar: struct Vec {
		items: array,
		cap: usize,
	},
}

fn main(argc: int, argv: char_ptr_ptr): u8;

fn cool(): struct { } {
	hmm;
}

fn start(): noreturn {
	let val = get_val;
	struct Game { 
		name: string,
	} 

	std::fjdk::dkfj::cool::nested_fn();
	let str: std::cool::string;

	// get colors
	// print colors
	let mut string: std::string;
	str = string = get_string();

	printf(std::cool::variable);

    // let i = 10;
    // take_ptr(&i);

	let i = (a + (b - d)) * c;
}

// fn take_ptr(ptr: const usize*) {}

foo;
foo + fd::bar;

// game: Game = get_game();
// game: Game;
// game := get_game() + game;

let game: Game = get_game();
let game: Game;
let game = get_game() + game;

// ---------------------------

fn main() {
    // let mut i = 12;
    // let ptr = &i;
    // *ptr += 1;
}
