struct Checker {
    Srcfile* srcfile;
    bool error;

    Checker(Srcfile* srcfile) 
        : srcfile(srcfile) {
        this->error = false;
    }

    Type* symbol(Expr* expr) {
        assert(expr->symbol.ref);
        return Stmt::get_type(expr->symbol.ref);
    }

    Type* expr(Expr* expr) {
        switch (expr->kind) {
            case ExprKind::symbol: {
                return this->symbol(expr);
            } break;

            default: {
                assert(0);
            } break;
        }
        return nullptr;
    }

    /* void variable(Stmt* stmt) { */
    /*     if (stmt->variable.type && stmt->variable.initializer) { */
    /*         Node* initializer_type = this->expr( */

    /*     }; */
    /* } */

    void stmt(Stmt* stmt) {
        switch (stmt->kind) {
            case StmtKind::variable: {
                this->variable(stmt);
            } break;
        }
    }

    void run() {
        for (auto& stmt: this->srcfile->stmts) {
            this->stmt(stmt);
        }
    }
};
